//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArduinoAdmin.Model
{
    using System;
    using System.Collections.Generic;
    
    using ArduinoAdmin.Lib;
    using System.Windows;
    public partial class Equipement : ModelBase
    {
    
    	// Constructeur par copie
        public Equipement(Equipement e)
        {
    		if(e == null)
    			return;
    		// Clone les membres
    		Copy(this, e);
        }
    	
    	// Constructeur
        public Equipement()
        {
            this.Commande = new HashSet<Commande>();
            this.Etat = new HashSet<Etat>();
        }
    	
    	// Copie une instance dans une autre
        public static Equipement Copy(Equipement dst, Equipement src)
        {
    		// Assigne les membres
            dst.Equipement_Id = src.Equipement_Id;
            dst.Serveur_Id = src.Serveur_Id;
            dst.Nom = src.Nom;
            dst.Description = src.Description;
            dst.RxPinNum = src.RxPinNum;
            dst.TxPinNum = src.TxPinNum;
            dst.Px = src.Px;
            dst.Py = src.Py;
            dst.Pz = src.Pz;
    
            dst.Commande = src.Commande;
            dst.Serveur = src.Serveur;
            dst.Etat = src.Etat;
    
    		return dst;
        }
    	
    	// Copie une instance dans une autre
        public static int Compare(Equipement dst, Equipement src)
        {
    		int i=0;
    		// Assigne les membres
             if(dst.Equipement_Id != src.Equipement_Id)
    			i++;
             if(dst.Serveur_Id != src.Serveur_Id)
    			i++;
             if(dst.Nom != src.Nom)
    			i++;
             if(dst.Description != src.Description)
    			i++;
             if(dst.RxPinNum != src.RxPinNum)
    			i++;
             if(dst.TxPinNum != src.TxPinNum)
    			i++;
             if(dst.Px != src.Px)
    			i++;
             if(dst.Py != src.Py)
    			i++;
             if(dst.Pz != src.Pz)
    			i++;
    
             if(dst.Commande != src.Commande)
    			i++;
             if(dst.Serveur != src.Serveur)
    			i++;
             if(dst.Etat != src.Etat)
    			i++;
    
    		return i;
        }
    	
    	// Vérifie si l'entité existe en BDD (Application dependant)
        public bool IsPersistant
        {
            get
            {
                return (((App)Application.Current).bdd.Entry(this).State == System.Data.Entity.EntityState.Detached)  ? false : true;
            }
        }
    
    	// Copie l'instance dans le presse-papier
        public void ToClipboard()
        {
            //Ecrit au format Texte (préférer une serialization XML)
            // !!Attention!! Pas de gestion des valeurs 'null'; Pas de gestion des string avec '\0'
    		string txt = "";
    
    		// Assigne les membres
    		txt += "Equipement_Id:" + Equipement_Id.ToString() + "\0";
    		txt += "Serveur_Id:" + (Serveur_Id==null ? "" : Serveur_Id.ToString()) + "\0";
    		txt += "Nom:" + Nom.ToString() + "\0";
    		txt += "Description:" + Description.ToString() + "\0";
    		txt += "RxPinNum:" + (RxPinNum==null ? "" : RxPinNum.ToString()) + "\0";
    		txt += "TxPinNum:" + (TxPinNum==null ? "" : TxPinNum.ToString()) + "\0";
    		txt += "Px:" + (Px==null ? "" : Px.ToString()) + "\0";
    		txt += "Py:" + (Py==null ? "" : Py.ToString()) + "\0";
    		txt += "Pz:" + (Pz==null ? "" : Pz.ToString()) + "\0";
    
    		Console.WriteLine("ToClipboard="+txt.Replace('\0','#'));
    		Clipboard.SetData("text/Equipement", txt);
        }
    	
    	// Charge l'instance depuis le presse-papier
        public void FromClipboard()
        {
            //Lit au format Texte (préférer une serialization XML)
            // !!Attention!! Pas de gestion des valeurs 'null'; Pas de gestion des string avec '\0'
            if (Clipboard.ContainsData("text/Equipement"))
            {
    
    			string txt = Clipboard.GetData("text/Equipement") as string;
    			string[] elements = txt.Split('\0');
    
    			foreach (string s in elements)
    			{
    				// recupere le nom et la valeur de la propriété
    				int separatorIndex = s.IndexOf(':');
    				if (separatorIndex < 1)
    					continue;
    				string property_name = s.Substring(0, separatorIndex);
    				string property_value = s.Substring(separatorIndex+1);
    			
    				// charge les paramètres
    				switch(property_name){
    					case "Equipement_Id":
    						try
    						{
    							//False
    							this.Equipement_Id = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Equipement_Id = new int();
    						}
    						break;
    					case "Serveur_Id":
    						try
    						{
    							//True
    							this.Serveur_Id = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Serveur_Id = null;
    						}
    						break;
    					case "Nom":
    						this.Nom = property_value;
    						break;
    					case "Description":
    						this.Description = property_value;
    						break;
    					case "RxPinNum":
    						try
    						{
    							//True
    							this.RxPinNum = int.Parse(property_value);
    						}
    						catch
    						{
    							this.RxPinNum = null;
    						}
    						break;
    					case "TxPinNum":
    						try
    						{
    							//True
    							this.TxPinNum = int.Parse(property_value);
    						}
    						catch
    						{
    							this.TxPinNum = null;
    						}
    						break;
    					case "Px":
    						try
    						{
    							//True
    							this.Px = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Px = null;
    						}
    						break;
    					case "Py":
    						try
    						{
    							//True
    							this.Py = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Py = null;
    						}
    						break;
    					case "Pz":
    						try
    						{
    							//True
    							this.Pz = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Pz = null;
    						}
    						break;
    				}
    				Console.WriteLine(property_name + "=" + property_value + "("+ this.GetType().GetProperty(property_name).GetValue(this) + ")");
    			}
    		}
        }
    	
    	// Vérifie si le presse-papier contient une instance de ce type
        public static bool HasClipboard()
        {
            return Clipboard.ContainsData("text/Equipement");
        }
    	
    
    	
    	// Propriétés de données
    	private int _equipement_id;
    	public int Equipement_Id { get { return _equipement_id; } set { _equipement_id = value; OnPropertyChanged("Equipement_Id");} }
    	private Nullable<int> _serveur_id;
    	public Nullable<int> Serveur_Id { get { return _serveur_id; } set { _serveur_id = value; OnPropertyChanged("Serveur_Id");} }
    	private string _nom;
    	public string Nom { get { return _nom; } set { _nom = value; OnPropertyChanged("Nom");} }
    	private string _description;
    	public string Description { get { return _description; } set { _description = value; OnPropertyChanged("Description");} }
    	private Nullable<int> _rxpinnum;
    	public Nullable<int> RxPinNum { get { return _rxpinnum; } set { _rxpinnum = value; OnPropertyChanged("RxPinNum");} }
    	private Nullable<int> _txpinnum;
    	public Nullable<int> TxPinNum { get { return _txpinnum; } set { _txpinnum = value; OnPropertyChanged("TxPinNum");} }
    	private Nullable<int> _px;
    	public Nullable<int> Px { get { return _px; } set { _px = value; OnPropertyChanged("Px");} }
    	private Nullable<int> _py;
    	public Nullable<int> Py { get { return _py; } set { _py = value; OnPropertyChanged("Py");} }
    	private Nullable<int> _pz;
    	public Nullable<int> Pz { get { return _pz; } set { _pz = value; OnPropertyChanged("Pz");} }
    	// Propriétés de navigation
    	private ICollection<Commande> _commande;
        public virtual ICollection<Commande> Commande { get { return _commande; } set { _commande = value; OnPropertyChanged("Commande");} }
    	private Serveur _serveur;
        public virtual Serveur Serveur { get { return _serveur; } set { _serveur = value; OnPropertyChanged("Serveur");} }
    	private ICollection<Etat> _etat;
        public virtual ICollection<Etat> Etat { get { return _etat; } set { _etat = value; OnPropertyChanged("Etat");} }
    }
}
