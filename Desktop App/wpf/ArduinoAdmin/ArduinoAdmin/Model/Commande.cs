//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArduinoAdmin.Model
{
    using System;
    using System.Collections.Generic;
    
    using ArduinoAdmin.Lib;
    using System.Windows;
    public partial class Commande : ModelBase
    {
    
    	// Constructeur par copie
        public Commande(Commande e)
        {
    		if(e == null)
    			return;
    		// Clone les membres
    		Copy(this, e);
        }
    	
    	// Constructeur
        public Commande()
        {
        }
    	
    	// Copie une instance dans une autre
        public static Commande Copy(Commande dst, Commande src)
        {
    		// Assigne les membres
            dst.Commande_Id = src.Commande_Id;
            dst.Equipement_Id = src.Equipement_Id;
            dst.Description = src.Description;
            dst.CodeCmd = src.CodeCmd;
            dst.CmdParams = src.CmdParams;
    
            dst.Equipement = src.Equipement;
    
    		return dst;
        }
    	
    	// Copie une instance dans une autre
        public static int Compare(Commande dst, Commande src)
        {
    		int i=0;
    		// Assigne les membres
             if(dst.Commande_Id != src.Commande_Id)
    			i++;
             if(dst.Equipement_Id != src.Equipement_Id)
    			i++;
             if(dst.Description != src.Description)
    			i++;
             if(dst.CodeCmd != src.CodeCmd)
    			i++;
             if(dst.CmdParams != src.CmdParams)
    			i++;
    
             if(dst.Equipement != src.Equipement)
    			i++;
    
    		return i;
        }
    	
    	// Vérifie si l'entité existe en BDD (Application dependant)
        public bool IsPersistant
        {
            get
            {
                return (((App)Application.Current).bdd.Entry(this).State == System.Data.Entity.EntityState.Detached)  ? false : true;
            }
        }
    
    	// Copie l'instance dans le presse-papier
        public void ToClipboard()
        {
            //Ecrit au format Texte (préférer une serialization XML)
            // !!Attention!! Pas de gestion des valeurs 'null'; Pas de gestion des string avec '\0'
    		string txt = "";
    
    		// Assigne les membres
    		txt += "Commande_Id:" + Commande_Id.ToString() + "\0";
    		txt += "Equipement_Id:" + (Equipement_Id==null ? "" : Equipement_Id.ToString()) + "\0";
    		txt += "Description:" + Description.ToString() + "\0";
    		txt += "CodeCmd:" + CodeCmd.ToString() + "\0";
    		txt += "CmdParams:" + CmdParams.ToString() + "\0";
    
    		Console.WriteLine("ToClipboard="+txt.Replace('\0','#'));
    		Clipboard.SetData("text/Commande", txt);
        }
    	
    	// Charge l'instance depuis le presse-papier
        public void FromClipboard()
        {
            //Lit au format Texte (préférer une serialization XML)
            // !!Attention!! Pas de gestion des valeurs 'null'; Pas de gestion des string avec '\0'
            if (Clipboard.ContainsData("text/Commande"))
            {
    
    			string txt = Clipboard.GetData("text/Commande") as string;
    			string[] elements = txt.Split('\0');
    
    			foreach (string s in elements)
    			{
    				// recupere le nom et la valeur de la propriété
    				int separatorIndex = s.IndexOf(':');
    				if (separatorIndex < 1)
    					continue;
    				string property_name = s.Substring(0, separatorIndex);
    				string property_value = s.Substring(separatorIndex+1);
    			
    				// charge les paramètres
    				switch(property_name){
    					case "Commande_Id":
    						try
    						{
    							//False
    							this.Commande_Id = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Commande_Id = new int();
    						}
    						break;
    					case "Equipement_Id":
    						try
    						{
    							//True
    							this.Equipement_Id = int.Parse(property_value);
    						}
    						catch
    						{
    							this.Equipement_Id = null;
    						}
    						break;
    					case "Description":
    						this.Description = property_value;
    						break;
    					case "CodeCmd":
    						this.CodeCmd = property_value;
    						break;
    					case "CmdParams":
    						this.CmdParams = property_value;
    						break;
    				}
    				Console.WriteLine(property_name + "=" + property_value + "("+ this.GetType().GetProperty(property_name).GetValue(this) + ")");
    			}
    		}
        }
    	
    	// Vérifie si le presse-papier contient une instance de ce type
        public static bool HasClipboard()
        {
            return Clipboard.ContainsData("text/Commande");
        }
    	
    
    	// Propriétés de données
    	private int _commande_id;
    	public int Commande_Id { get { return _commande_id; } set { _commande_id = value; OnPropertyChanged("Commande_Id");} }
    	private Nullable<int> _equipement_id;
    	public Nullable<int> Equipement_Id { get { return _equipement_id; } set { _equipement_id = value; OnPropertyChanged("Equipement_Id");} }
    	private string _description;
    	public string Description { get { return _description; } set { _description = value; OnPropertyChanged("Description");} }
    	private string _codecmd;
    	public string CodeCmd { get { return _codecmd; } set { _codecmd = value; OnPropertyChanged("CodeCmd");} }
    	private string _cmdparams;
    	public string CmdParams { get { return _cmdparams; } set { _cmdparams = value; OnPropertyChanged("CmdParams");} }
    	// Propriétés de navigation
    	private Equipement _equipement;
        public virtual Equipement Equipement { get { return _equipement; } set { _equipement = value; OnPropertyChanged("Equipement");} }
    }
}
